version: "3.8"

services:
  # PostgreSQL database
  postgres:
    image: postgres:16-alpine
    container_name: portdex-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: portdex_chat
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis (optional, if needed for caching)
  redis:
    image: redis:7-alpine
    container_name: portdex-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Main application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: portdex-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - HOSTNAME=0.0.0.0
      - PORT=3000
      - POSTGRES_URL=postgresql://postgres:postgres@postgres:5432/portdex_chat
      - AUTH_SECRET=your-super-secret-auth-key-change-this-in-production
      - NEXTAUTH_URL=http://localhost:3000
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      # Mount source code for development (optional - remove for production-like testing)
      - .:/app
      - /app/node_modules
      - /app/.next
    command: ["pnpm", "dev"]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database migration service (runs once)
  migrate:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    container_name: portdex-migrate
    environment:
      - POSTGRES_URL=postgresql://postgres:postgres@postgres:5432/portdex_chat
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - .:/app
    command: ["pnpm", "db:migrate"]
    restart: "no"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: portdex-network
